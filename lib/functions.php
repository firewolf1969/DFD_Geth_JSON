<?php

/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
function ping_server($server_string, $timeout) {
      
$server_string = preg_replace('#^https?://#', '', $server_string);

$server_info = explode(":", $server_string);

      if ( $fp = fsockopen($server_info[0],$server_info[1],$errCode,$errStr,$timeout) ) {   
	 return true;
      }
      else {
	 return false;
      } 
      fclose($fp);

}
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
function json_post_data($request, $param=false) {

global $json_server, $general_commands;

  if ( $request == 'eth_getBalance' ) {
  $general_commands[$request]['params'] = array($param, 'latest');
  }
  elseif ( $request == 'eth_getTransactionCount' ) {
  $general_commands[$request]['params'] = array($param, 'latest');
  }
  elseif ( $request == 'eth_compileSolidity' ) {
  $general_commands[$request]['params'] = array($param);
  }

//echo  $commands_array[$request]['params'];

$json_post = json_encode($general_commands[$request]);

$ch = curl_init($json_server);

curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");  
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_POSTFIELDS,$json_post);
curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);

$result = curl_exec($ch);
curl_close($ch);

return json_parsed_array($result);

}
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////



/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
function json_parsed_array($jsondata) {
  
$data = json_decode($jsondata, TRUE);
  
  //print_r($data);
      if (is_array($data) || is_object($data)) {
	
	    foreach ($data as $key => $value) {
	      
	      //print_r($key);
	      
	      if ( $key == 'result' ) {
	       
		return $data[$key];
	       
	      }
	    
    
	    }
	    
      }
  
}
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////



/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
function eth_balance($address) {

// Convert to eth
return number_format( ( hexdec(json_post_data('eth_getBalance', $address)) / 1000000000000000000 ) , 8 );

}
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////



/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
function eth_transactions($address) {

return number_format( hexdec(json_post_data('eth_getTransactionCount', $address)) );

}
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////



/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
function compile_solidity($code) {

return json_post_data('eth_compileSolidity', $code);

}
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

?>